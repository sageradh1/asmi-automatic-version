setup git in ubuntu:
	1. sudo apt-get install git
	2. git config --global user.name "sageradh1"
	   (If user.name and user.email are already set ,then use "git config --list" command)
	3. git config --global user.email "sageradh1@gmail.com"
	4. make project folder and go inside OR go to already existing project folder location
	5. git init
	6. git remote add origin "https://github.com/sageradh1/asmi-flask.git"
	7. Add files you want 
	8. git add .
	9. git commit -m "Commit message"
	10. git push -u origin master

For special characters .. for eg @, there are two options:
	1. You can use \ to escape the @ symbol,
		\@our-team
	2. You can put it in quotes 
		"/@our-team"

For exception gitignore files ! can be used: for eg:
	To ignore all . files but include . folders
	.*
	!.*/



To empty git cache:
	git rm --cached -r ./


To see all the commits done yet:
	git log
	git log --pretty=oneline

Nice way to roll back to previous commits:
	1. See all the commits done yet: 
		git log --pretty=oneline
			output will be:
				676ec Added 'awesome' to text
				735c5 Initial commit
	2. Revert the commitid one step above your required state..because that commitID will be reverted
		if you want to go to 735c5 state ,use 676ec
			git revert 676ec
	3.  See all the commits again: 
		git log --pretty=oneline
			output will be:
				f68e5 Revert "Added 'awesome' to text"
				676ec Added 'awesome' to text
				735c5 Initial commit
	4. git push -u origin master

	For mutiple commits 
	1. git revert HEAD~2
	2. git revert 676ec 735c5
	3. git push -u origin master

Brutal ways to roll back to previous commits:
WARNING this will cause lose in all the commit history...only use this as last option
	1. git reset --hard 66ada4cc61d62afc
		our local repo's head will be at 66ada4cc61d62afc
	2. git add .
	3. git commit -m "Go back to Commit 66ada4cc61d62afc"
		new commit
	4. git push -f

To add new branch 
	Only create a new branch but not switch
		git branch new_branch_name

	Create a branch(if not already present) and switch to it
		git checkout -B <new_branch> <start point>
			Where:
				<new_branch> is your new branch (e.g. my_branch)
				<start point> is your starting branch.it is optional(master in your case)
				-B creates new branch starting from <start point>, if it already exists, then reset it to (it won't fail as -b when branch already exists)
		git checkout -B webapp_sagar_serverside

To switch back to already created master branch:
	git checkout master

To merge my newBranch into master branch:
	1. git checkout master     (First Switch to master branch)
	2. git merge newBranch     (This will merge the newBranch into the current branch which is master branch)
	3. git push origin master  (This will push the changes in the remote master)

For merging and for simpler and linear git history:
	1. git rebase newBranch

To add Tags
	1. git tag 1.0.0
	2. git push origin --tags

How to sync local directory with remote master directory:
	1. Check local position with git log master
	2. Check remote repo position with git log origin/master
	3. git fetch origin master  (from remote repo => local repo)
	4. Again Check remote repo position with git log origin/master
	5. git merge origin/master	(from local repo => working repo)

To switch to next branch:
	git fetch origin         <----this will fetch the branch
	git checkout branch_name <--- Switching the branch
	git pull 				 <--- If you need to stay upto date to your branch

git reset --hard 38c114c14deb8f924882d59bb1ce093855c78f9a