1. print(url_for('index'))
1. /
2. print(url_for('login'))
2. /login
3. print(url_for('login', next='/'))
3. /login?next=/
4. print(url_for('profile', username='John Doe'))
4. /user/John%20Doe


For Url with key value query such as (url?key=value) we can use the args attribute:
searchword = request.args.get('key', '')


To Access data from forms:
@app.route('/login', methods=['POST', 'GET'])
def login():
    error = None
    if request.method == 'POST':
        if valid_login(request.form['username'],
                       request.form['password']):
            return log_the_user_in(request.form['username'])
        else:
            error = 'Invalid username/password'
    # the code below is executed if the request method
    # was GET or the credentials were invalid
    return render_template('login.html', error=error)


To Access data from cookies (If you want to use sessions, do not use the cookies directly but instead use the Sessions in Flask that add some security on top of cookies for you.)

Reading cookies:
	from flask import request
	@app.route('/')
	def index():
	    username = request.cookies.get('username')
	    # use cookies.get(key) instead of cookies[key] to not get a
	    # KeyError if the cookie is missing.

Storing cookies:
	from flask import make_response
	@app.route('/')
	def index():
	    resp = make_response(render_template(...))
	    resp.set_cookie('username', 'the username')
	    return resp


General redirection: 
	from flask import abort, redirect, url_for
	@app.route('/')
	def index():
	    return redirect(url_for('login'))


Redirect to error:
	from flask import render_template
	@app.errorhandler(404)
	def page_not_found(error):
	    return render_template('page_not_found.html'), 404

Adding something in response header:
	@app.errorhandler(404)
	def not_found(error):
	    resp = make_response(render_template('error.html'), 404)
	    resp.headers['X-Something'] = 'A value'
	    return resp









